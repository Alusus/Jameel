function one {
fcall(a,b,c);
fcall(
a,b,c);
fcall(
a,b,
c);

fcall(

a,b,


c);

fcall(a,b,
c);

fcall(a,b,


c);

fcall({a,b,c});
fcall({   });
fcall({


});
fcall(
{a,b,c});

fcall(
{a,b,c
});

fcall({
a,b,c
});

fcall({
a,
b,c
});

fcall({
a,
b,

c,
});

fcall({{a,b,c}});

fcall({{a,b,c},{d,e,f}});

fcall({{a,b,c},
{d,e,f}});

fcall({
{a,
b,c},{d,
e,f}});

if true {
};

if true {
}

;
}
function two{}
function three{
fcall(
a,b,c
);
};
function four{
abc.{member()}~cast[Def];
abc.{member()}.member2();
abc.{
member()}~cast[Def];
abc.{member()}(123);
abc.{
member()}(123);
if true { fncall()}(someptr~cast[FnPtr])();
}

@mod1
function five{}

@mod2[   "abc"]
func six(){ }
@mod3[abc ]     function seven {}
@mod4    function eight{}

function nine{c='a';c='\'';}
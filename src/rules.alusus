@merge module Jameel {
    // Because the standard libc regex lib doesn't support utf-8 we'll have to work around it by treating non-ascii
    // characters as strings, in other words avoid character groups or characters ranges with non-ascii chars.
    def identifierChar: String(
        "([a-zA-Z0-9_]|ا|ب|ت|ث|ج|ح|خ|د|ذ|ر|ز|س|ش|ص|ض|ط|ظ|ع|غ|ف|ق|ك|ل|م|ن|ه|و|ي|ـ|ى|ؤ|ئ|ء|أ|إ|آ|ّ|َ|ً|ُ|ٌ|ِ|ٍ|ْ)"
    );
    def nonIdentifierChar: String("[ \t\n\r\\(\\)\\{\\}+=!@#$%^&*\\[\\]|,/-]");
    def spacesFollowedByIdentifier: Regex.Matcher(String("^[ \t]*") + identifierChar, 1);
    def spacesAndNewLines: Regex.Matcher("^[ \t\n\r]+", 1);
    def nonEmptyLine: Regex.Matcher("^[ \t]*([^\n\r])", 1);
    def spacesAndNewLinesFollowedByClosingBrace: Regex.Matcher("^[ \t\n\r]*\\}", 1);
    def spacesAndNewLinesFollowedByOpeningBrace: Regex.Matcher("^[ \t\n\r]*\\{", 1);
    def elseKeyword: Regex.Matcher(String.format("^[ \t\n\r]*(else|وإلا)%s", nonIdentifierChar.buf), 1);

    // TODO: Fix identifier followed by brace in for statement.
    // TODO: Test block comments.
    // TODO: Test bigger code samples.

    function getAlususRules (): Array[SrdRef[Rule]] {
        def contextStack: SrdRef[Array[String]];
        contextStack.construct();
        contextStack.add({ String() });

        return Array[SrdRef[Rule]]({
            // Comment Lines
            Rule("(//[^\n]*)[ \t]*\n", closure(args: Array[String]) {
                printSourceCode(args(1));
                handleNewLines(1);
            }),
            // String Literals
            Rule("\"([^\"]|\\\\\")*\"", closure(args: Array[String]) {
                printSourceCode(args(0));
            }),
            // Commas and Colon
            Rule("(,|،|:)[ \t]*", closure(args: Array[String]) {
                printSourceCode(String.format("%s ", args(1).buf));
            }),
            // Unary Operators
            Rule("(--|\\+\\+)[ \t]*", closure(args: Array[String]) {
                printSourceCode(args(1));
            }),
            // 2 Char Operators
            Rule("(==|!=|<<|>>|&&|\\|\\|)[ \t]*", closure(args: Array[String]) {
                printSourceCode(String.format(" %s ", args(1).buf));
            }),
            // Single Char Operators
            Rule("([-+*/=&|$<>])[ \t]*", closure(args: Array[String]) {
                printSourceCode(String.format(" %s ", args(1).buf));
            }),
            // Block Statements
            Rule(
                String.format("(module|class|function|handler|دالة|وحدة|عملية)%s", nonIdentifierChar.buf),
                closure(args: Array[String]) {
                    moveBackUtf8Chars(1);
                    contextStack(contextStack.getLength() - 1) = "block";
                    printSourceCode(String.format("%s ", args(1).buf));
                }
            ),
            // If/While Statements
            Rule(String.format("(if|while|إذا|بينما)%s", nonIdentifierChar.buf), closure(args: Array[String]) {
                moveBackUtf8Chars(1);
                contextStack(contextStack.getLength() - 1) = "if";
                printSourceCode(String.format("%s ", args(1).buf));
            }),
            // New Lines
            Rule("\n", closure(args: Array[String]) {
                if (
                    contextStack(contextStack.getLength() - 1) != "block" &&
                    contextStack(contextStack.getLength() - 1) != "if"
                ) or (
                    spacesAndNewLinesFollowedByOpeningBrace.match(getCurrentContent()).getLength() == 0
                ) {
                    if spacesAndNewLinesFollowedByClosingBrace.match(getCurrentContent()).getLength() != 0 {
                        skip(spacesAndNewLines);
                    } else {
                        printSourceCode("\n");
                        def result: Array[String] = nonEmptyLine.match(getCurrentContent());
                        if result.getLength() == 0 handleNewLines()
                        else if result(1) == ")" {
                            printIndent(indent);
                        } else if elseKeyword.match(getCurrentContent()).getLength() != 0 {
                            printIndent(indent);
                            skip(spacesAndNewLines);
                        } else {
                            printIndent(indent + 4);
                        }
                    }
                }
            }),
            // Semicolon
            Rule("(;|؛)", closure(args: Array[String]) {
                contextStack(contextStack.getLength() - 1) = "";
                printSourceCode(args(0));
                handleNewLines(1);
            }),
            // Parenthesis
            Rule("(\\[|\\()", closure(args: Array[String]) {
                printSourceCode(args(0));
                contextStack.add(String());
            }),
            Rule("(\\]|\\))", closure(args: Array[String]) {
                printSourceCode(args(0));
                if contextStack.getLength() > 1 {
                    contextStack.remove(contextStack.getLength() - 1);
                }
                if spacesFollowedByIdentifier.match(getCurrentContent()).getLength() != 0 {
                    printSourceCode(" ");
                }
            }),
            // Braces
            Rule("\\{", closure(args: Array[String]) {
                skip(spacesAndNewLines);
                if (
                    contextStack(contextStack.getLength() - 1) == "block" ||
                    contextStack(contextStack.getLength() - 1) == "if"
                ) printSourceCode(" ");
                printSourceCode("{");
                indent += 4;
                handleNewLines(1);
                // printIndent();
                contextStack.add(String());
            }),
            Rule("\\}", closure(args: Array[String]) {
                if contextStack.getLength() > 1 {
                    contextStack.remove(contextStack.getLength() - 1);
                }
                printSourceCode("\n");
                indent -= 4;
                printIndent();
                printSourceCode("}");
                if elseKeyword.match(getCurrentContent()).getLength() != 0 {
                    printSourceCode(" ");
                    skip(spacesAndNewLines);
                } else {
                    if contextStack(contextStack.getLength() - 1) == "block" {
                        handleNewLines(2);
                    } else {
                        handleNewLines(1);
                    }
                }
            }),
            // Consecutive Words
            Rule(String.format("(%s+)[ \t]+%s", identifierChar.buf, identifierChar.buf), closure(args: Array[String]) {
                printSourceCode(String.format("%s ", args(1).buf));
                moveBackUtf8Chars(1);
            }),
            // Spaces
            Rule("[ \t]+", closure(args: Array[String]) {
            }),
        });
    }

    function handleNewLines () {
        handleNewLines(0);
    }

    function handleNewLines (minNewLines: Int) {
        if spacesAndNewLinesFollowedByClosingBrace.match(getCurrentContent()).getLength() == 0 {
            def match: Array[String] = spacesAndNewLines.match(getCurrentContent());
            if match.getLength() > 0 {
                def i: Int;
                for i = 0, i < match(0).getLength(), ++i {
                    if match(0)(i) == '\n' {
                        printSourceCode("\n");
                        --minNewLines;
                    }
                }
                index += match(0).getLength();
            }
            while (minNewLines > 0) {
                printSourceCode("\n");
                --minNewLines;
            }
            printIndent();
        } else {
            skip(spacesAndNewLines);
        }
    }
}

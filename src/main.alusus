import "Srl/Console";
import "Srl/Fs";
import "Srl/String";
import "Srl/Array";
import "Srl/Map";
import "Srl/Regex";
import "Srl/refs";
import "Srl/System";
import "closure";
import "Build";
import "alusus_rules";
import "json_rules";

@merge module Jameel {
    use Srl;

    def fileContent: String;
    def output: ptr[Fs.File];
    def index: Int;
    def indent: Int;

    function getLanguageRules(lang: String): Array[SrdRef[Rule]] {
        def rules: Array[SrdRef[Rule]];
        if lang == "alusus" rules = AlususRules.getRules()
        else if lang == "json" rules = JsonRules.getRules()
        else {
            System.fail(1, "Invalid language option");
        }
        return rules;
    }

    function beautify (rules: Array[SrdRef[Rule]], sourceFile: String, destFile: String) {
        fileContent.clear();
        output = 0;
        index = 0;
        indent = 0;

        fileContent = Fs.readFile(sourceFile);
        if fileContent == "" {
            System.fail(1, "Source file not found!");
        }

        if destFile != "" {
            output = Fs.openFile(destFile, "w");
            if output == 0 {
                System.fail(1, "Could not open destination file!");
            }
        }

        while index < fileContent.getLength() {
            def j: Int;
            for j = 0, j < rules.getLength(), ++j {
                if rules(j).run() continue 2;
            }
            printSourceCode(String.format("%c", fileContent(index)));
            ++index;
        }

        if output != 0 Fs.closeFile(output);
    }

    function printSourceCode(str: CharsPtr) {
        if output == 0 Console.print("%s", str)
        else Fs.print(output, "%s", str);
    }

    function getCurrentContent(): CharsPtr {
        return fileContent.buf + index;
    }

    function skip(regex: ref[Regex.Matcher]) {
        def matches: Array[String] = regex.match(getCurrentContent());
        if matches.getLength() > 0 {
            index += matches(0).getLength();
        }
    }

    function isNext(regex: ref[Regex.Matcher]): Bool {
        if regex~ptr == 0 return false;
        return regex.match(getCurrentContent()).getLength() != 0;
    }

    function moveBackUtf8Chars(count: Int) {
        while count > 0 {
            --index;
            while (getCurrentContent()~cnt(0) & 0xC0) == 0x80 { --index }
            --count;
        }
    }

    function printIndent() {
        printIndent(indent);
    }

    function printIndent(i: Int) {
        while i-- > 0 printSourceCode(" ");
    }

    class Rule {
        def name: String;
        def regex: Regex.Matcher;
        def action: closure (Array[String]);

        handler this~init(regexStr: CharsPtr, action: closure (Array[String])) {
            this.name = regexStr;
            this.regex~init(String("^") + regexStr, 1);
            this.action = action;
        }

        handler this_type(regexStr: CharsPtr, action: closure (Array[String])): SrdRef[Rule] {
            def rule: SrdRef[Rule]
            rule.alloc()~init(regexStr, action);
            return rule;
        }

        handler this.run(): Bool {
            def matches: Array[String] = this.regex.match(getCurrentContent());
            if matches.getLength() > 0 {
                index += matches(0).getLength();
                this.action(matches);
                return true;
            }
            return false;
        }
    }

    function parseArgs (argCount: Int, args: ptr[array[CharsPtr]]): Map[String, String] {
        def result: Map[String, String];
        // Default to Alusus language.
        result(String("lang")) = "alusus";

        def i: Int;
        def argIndex: Int = 1;
        for i = 0, i < argCount, ++i {
            def str: String = args~cnt(i);
            if str == "--build" {
                result(String("build")) = "true";
            } else if str == "--lang" {
                if i >= argCount - 1 return Map[String, String]();
                result(String("lang")) = String(args~cnt(++i));
            } else if str(0) == '-' and str(1) == '-' {
                return Map[String, String]();
            } else {
                if argIndex == 1 result(String("arg1")) = str
                else if argIndex == 2 result(String("arg2")) = str
                else return Map[String, String]();
                ++argIndex;
            }
        }
        if result(String("build")) == "" and result(String("arg1")) == "" return Map[String, String]()
        if result(String("build")) != "" and result(String("arg1")) != "" return Map[String, String]()
        else return result;
    }

    @expname[main]
    function start (argCount: Int, args: ptr[array[CharsPtr]]): Int {
        def parsedArgs: Map[String, String] = parseArgs(argCount - 1, args + 1);
        if parsedArgs(String("arg1")) == "" {
            Console.print("Usage: jameel [options] <source> [<dest>]\n");
            Console.print("If <dest> is not provided the result will be printed to the standard output.\n");
            Console.print("Options:\n");
            Console.print("    --lang <language>    The language of the provided file\n");
            Console.print("                         Available lang options: alusus, json\n");
        } else {
            beautify(
                getLanguageRules(parsedArgs(String("lang"))),
                parsedArgs(String("arg1")),
                parsedArgs(String("arg2"))
            );
        }
        return 0;
    }
}

function test (): Bool {
    use Srl;

    def files: Map[String, String];
    files.set(String("sample1"), String("alusus"));
    files.set(String("sample2"), String("alusus"));
    files.set(String("sample3"), String("alusus"));
    files.set(String("sample4"), String("alusus"));
    files.set(String("sample5"), String("json"));

    def result: Bool = true;
    def i: Int;
    for i = 0, i < files.getLength(), ++i {
        Console.print("Running Jameel on: %s.%s\n", files.keyAt(i).buf, files.valAt(i).buf);
        Jameel.beautify(
            Jameel.getLanguageRules(files.valAt(i)),
            String.format("test/%s.%s", files.keyAt(i).buf, files.valAt(i).buf),
            String.format("test/%s.testresult.%s", files.keyAt(i).buf, files.valAt(i).buf)
        );

        def generated: String = Fs.readFile(
            String.format("test/%s.testresult.%s", files.keyAt(i).buf, files.valAt(i).buf)
        );
        def expected: String = Fs.readFile(
            String.format("test/%s.beautified.%s", files.keyAt(i).buf, files.valAt(i).buf)
        );

        if generated == expected {
            Console.print("Test successful,\n\n");
            System.exec(String.format("rm test/%s.testresult.%s", files.keyAt(i).buf, files.valAt(i).buf));
        } else {
            Console.print("Test failed,\n\n");
            result = false;
        }
    }
    return result;
}

function generateExecutable() {
    if test() {
        if Build.genExecutable(Jameel.start~ast, "jameel") {
          Srl.Console.print("Build complete.\n");
        } else {
            Srl.System.fail(1, "Build failed!");
        }
    } else {
        Srl.System.fail(1, "Automated tests were not successful. Aborting...");
    }
}

def parsedArgs: Srl.Map[Srl.String, Srl.String] = Jameel.parseArgs(Process.argCount - 2, Process.args + 2);
if parsedArgs.getLength() == 0 {
    Srl.Console.print("Jameel usage: alusus jameel.alusus [options] <source> [<dest>]\n");
    Srl.Console.print("If <dest> is not provided the result will be printed to the standard output.\n");
    Srl.Console.print("Options:\n");
    Srl.Console.print("    --lang <language>    The language of the provided file\n");
    Srl.Console.print("                         Available lang options: alusus, json\n");
    Srl.Console.print("    --build              Generate an executable version of jameel.\n");
} else if parsedArgs(Srl.String("build")) == "true" {
    generateExecutable();
} else {
    Jameel.beautify(
        Jameel.getLanguageRules(parsedArgs(Srl.String("lang"))),
        parsedArgs(Srl.String("arg1")),
        parsedArgs(Srl.String("arg2"))
    );
}
